# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tournament

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    DDB_REMOTE: ${opt:remoteddb, self:custom.offline}
    AWS_PROFILE: ${opt:profile, self:provider.profile}
  iamRoleStatement:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-s3-local/**
    - node_modules/serverless-offline/**


custom:
  defaultStage: dev
  profiles:
    dev: tournamentDev
    prod: tournamentProd
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8001
      inMemory: true

functions:

  tournamentCreate:
    handler: handlers/tournament.post
    events:
      - http:
          path: tournament
          method: post
          cors: true

  tournamentGet:
    handler: handlers/tournament.get
    events:
      - http:
          path: tournament/{id}
          method: get
          cors: true

  tournamentGetMatches:
    handler: handlers/tournament.get_matches
    events:
      - http:
          path: tournament/{id}/matches
          method: get
          cors: true

  tournamentPublishRound:
    handler: handlers/rounds.put
    events:
      - http:
          path: tournament/{id}/rounds/{round_type}
          method: put
          cors: true

  matchGet:
    handler: handlers/match.get
    events:
      - http:
          path: match/{id}
          method: get
          cors: true

  matchUpdate:
    handler: handlers/match.put
    events:
      - http:
          path: match/{id}
          method: put

  teamUpdate:
    handler: handlers/team.put
    events:
      - http:
          path: team/{id}
          method: put

resources:
  Resources:
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DescribeTable
              Resource: arn:aws:dynamodb:*:*:table/*
        Roles:
          - Ref: IamRoleLambdaExecution
